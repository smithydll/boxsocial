<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../../xsl/thesis.xsl" ?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0b5/rng/docbookxi.rng" type="xml"?>
<article xml:id="d4" xmlns="http://docbook.org/ns/docbook">
    <info>
        <title>D4.D0-2008 Manual of Style</title>
        <author>
            <personname>
                <firstname>David</firstname>
                <othername>Lachlan</othername>
                <surname>Smith</surname>
            </personname>
        </author>
        <legalnotice>
            <para>Permission is granted to copy, distribute and/or modify this document under the
                terms of the GNU Free Documentation License, Version 1.2 as published by the Free
                Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no
                Back-Cover Texts. A copy of the license is included in the section entitled "GNU
                Free Documentation License".</para>
        </legalnotice>
        <mediaobject>
            <imageobject>
                <imagedata fileref="standard_includes\logo.png" width="6.0cm"> </imagedata>
            </imageobject>
        </mediaobject>
    </info>
    <section>
        <title>Introduction</title>
        <section>
            <title>General</title>
            <para>The manual of style is the Box Social `coding standard`. This
                standard covers the production of C# code, HTML, English language files, and
                graphical elements.</para>
            <para>This guide exists to keep the style of the project in sync and
                manageable such that anyone familiar with the style can understand the project
                sources.</para>
        </section>
        <section>
            <title>Definitions</title>
            <para>All definitions are from the <ulink url="http://dictionary.cambridge.org/">Cambridge Learner Dictionary</ulink> apart from those with formal definitions as follows:</para>
            <glosslist>
                <glossentry>
                    <glossterm>Shall</glossterm>
                    <glossdef><para>Shall denotes a requirement that is mandatory, and non-compliance seriously affects the ability for the inclusion of the non-compliant content and will result in it being rejected.</para></glossdef>
                </glossentry>
                <glossentry>
                    <glossterm>Should</glossterm>
                    <glossdef><para>Should denotes a requirement that is desired but is not mandatory.</para></glossdef>
                </glossentry>
                <glossentry>
                    <glossterm>Will</glossterm>
                    <glossdef><para>Will denotes an advisory clause that describes the operation environment, which shall be considered in adhering to the specification.</para></glossdef>
                </glossentry>
            </glosslist>
        </section>
        <section>
            <title>Referenced standards</title>
            <para>The following standards are referenced in this document and shall be adhered to as referenced.</para>
            <orderedlist numeration="loweralpha">
                <listitem><para><ulink url="http://www.w3.org/TR/xhtml11/">xHTML 1.1 strict</ulink></para></listitem>
                <listitem><para><ulink url="http://www.w3.org/TR/SVG11/">SVG 1.1</ulink></para></listitem>
                <listitem><para><ulink url="http://docs.oasis-open.org/docbook/specs/docbook-5.0-spec.html">DocBook 5.0</ulink></para></listitem>
                <listitem><para>ISO/IEC 23270:2006 - Information technology - Programming languages - C#</para></listitem>
                <listitem><para>ISO/IEC 16262:2002 - Information technology - ECMAScript language specification</para></listitem>
            </orderedlist>
        </section>
    </section>
    <section xml:id="d4-cs">
        <title>C# Coding Standard</title>
        <section>
            <title>General</title>
            <para role="clause">Most of the layout standards are Visual Studio defaults.</para>
        </section>
        <section>
            <title>Standard C# File Header</title>
            <para>All C# source files shall use the following header at the top of each file before
                any other content or whitespace.</para>
            <figure>
                <title>Standard C# File Header</title>
                <programlisting><code>/*
 * Box Social™
 * http://boxsocial.net/
 * Copyright © 2007, David Lachlan Smith
 * 
 * $Id:$
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</code></programlisting>
            </figure>
        </section>
        <section>
            <title>Indentation</title>
            <para>Indented sections shall be indented by four (4) spaces per indent, always.</para>
            <para>You should set your editor up to translate the tab key to indenting by four
                characters.</para>
            <para>Block contents shall be indented by a single indentation.</para>
            <example>
                <title>Example block indentation</title>
                <programlisting><code>public override string Name
{
    get
    {
        return "Networks";
    }
}</code></programlisting>
            </example>
            <para>Braces shall not be indented.</para>
            <example>
                <title>Example wrong brace indentation</title>
                <programlisting role="incorrect"><code>public override string Name
    {
        get
            {
                return "Networks";
            }
    }</code></programlisting>
            </example>
            <para>Case contents shall be indented. This includes the break keyword.</para>
            <para>Case labels shall be indented.</para>
            <example>
                <title>Example switch block indentation</title>
                <programlisting><code>switch (type)
{
    case "USER":
        DoThis();
        break;
    default:
        return;
}</code></programlisting>
            </example>
        </section>
        <section>
            <title>New Lines</title>
            <para>New lines in files shall be the "Windows" CR+LF combination.</para>
            <para>The keywords, else, catch, and finally shall be placed on new lines by
                themselves.</para>
            <example>
                <title>Example correct if/else statement</title>
                <programlisting><code>if (true)
{
    DoThis();
}
else
{
    DoThat();
}</code></programlisting>
            </example>
            <example>
                <title>Example wrong if/else statement</title>
                <programlisting role="incorrect"><code>if (true)
{
    DoThis();
} else {
    DoThat();
}</code></programlisting>
            </example>
            <para>The base keyword shall be indented a single (1) indent on a new line (including the preceding colon).</para>
            <example>
                <title>Example constructor statement with base keyword</title>
                <programlisting><code>Forum(Core core, long forumId)
    : base(core)
{
    LoadItem(forumId);
}</code></programlisting>
            </example>
        </section>
        <section>
            <title>Braces</title>
            <para>Opening braces go on a new line.</para>
            <example>
                <title>Example brace usage</title>
                <programlisting><code>public override string Name
{
    get
    {
        return "Networks";
    }
}</code></programlisting>
            </example>
        </section>
        <section>
            <title>Spacing</title>
            <para>There shall no space in between the function name, and the opening bracket of the
                parameter.</para>
            <example>
                <title>Example function spacing</title>
                <programlisting><code>public new long Delete()
{
    Delete();
}</code></programlisting>
            </example>
            <example>
                <title>Example wrong function spacing</title>
                <programlisting role="incorrect"><code>public new long Delete ()
{
    Delete();
}</code></programlisting>
            </example>
            <para>There shall no space in between empty parentheses.</para>
            <example>
                <title>Example wrong function parenthesisation</title>
                <programlisting role="incorrect"><code>public new long Delete( )
{
    Delete();
}</code></programlisting>
            </example>
            <para>There shall be no space in between an enumerated variable, and the enumerated item
                accessor (opening square bracket).</para>
            <example>
                <title>Example of correct use of enumerated variable</title>
                <programlisting><code>long userId = users[0].Id;</code></programlisting>
            </example>
            <example>
                <title>Example of wrong use of enumerated variable</title>
                <programlisting role="incorrect"><code>long userId = users [0].Id;</code></programlisting>
            </example>
            <para>There shall be no space in between the opening, and closing bracket and
                parenthesised contents.</para>
            <para>There shall be no space in between the opening, and closing square bracket and
                square bracketed contents.</para>
            <example>
                <title>Example of wrong use of enumerated variable</title>
                <programlisting role="incorrect"><code>long userId = users[ 0 ].Id;</code></programlisting>
            </example>
            <para>There shall be a space in between the opening, and closing brace and brace
                enclosed contents.</para>
            <example>
                <title>Example of correct use of braces for enumerated lists</title>
                <programlisting><code>List&lt;long&gt; = new List&lt;long&gt;() { 0, 1, 2 };</code></programlisting>
            </example>
            <para>There shall be a space in between a control flow statement and parentheses, such
                as if, else if, for, where, and catch.</para>
            <para>There shall be a space after a comma.</para>
            <para>There shall be no space before a comma.</para>
            <para>There shall be a space before and after the interface colon on class definitions.</para>
            <para>There shall be a space after the base colon on constructor method definitions.</para>
            <para>There shall be a space after the semi colon in for statements.</para>
            <para>There shall be no space before the semi colon in for statements.</para>
            <para>There shall be a space before and after a binary operator (+, *, -, /,
                &amp;&amp;, ||, etc...)</para>
        </section>
        <section>
            <title>Parenthesising Complex Expressions</title>
            <para>Always parenthesise complex boolean logic expressions. A complex expression is one
                that consists of more than one comparison operator.</para>
        </section>
        <section>
            <title>Naming</title>
            <para>All members are to be named using camel case. To remove confusion, camel case
                shall either be referred to as upper camel case (UpperCamelCase) or lower camel case
                (lowerCamelCase), example in part.</para>
            <para>Public members of a class, structure, or enumeration are always written in upper
                camel case.</para>
            <para>Private members (e.g. local variables) of a class, or structure are always written
                in lower camel case.</para>
            <para>Undefined and non-standard abbreviations are to be avoided.</para>
            <para>Internal members are treated as public members.</para>
            <para>Protected members are treated as private members.</para>
            <para>A member is a function, procedure, property, or variable.</para>
            <para>Constants are to be named using underscore separated words written in upper
            case.</para>
        </section>
    </section>
    <section xml:id="d4-ecma">
        <title>ECMAScript (JavaScript)</title>
        <section>
        	<title>General</title>
        	<para>ECMAScript should be used where appropriate to add value.</para>
        	<para>ECMAScript shall not be used to replace functionality that prevents browsers without ECMAScript from performing all functions.</para>
        	<para>Each application shall be permitted a single ECMAScript file to be included on pages generated by the application.</para>
        	<para>Coding standards from <xref linkend="d4-cs" /> shall be used unless stated otherwise by <xref linkend="d4-ecma" /></para>
        </section>
    </section>
    <section>
        <title>HTML Standard</title>
        <section>
        	<title>General</title>
        	<para>All HTML either in template files, or code generated shall be xHTML 1.1 strict compliant.</para>
        	<para>HTML should be free of hacks to make it work in specific browsers.</para>
        </section>
    </section>
    <section>
        <title>English Language Standard</title>
        <section>
            <title>General</title>
            <para>The default language used throughout Box Social is English. It is preferred to use
                a formal international dialect in the default distribution as opposed to any
                regional dialect. The exception is the inclusion of Australianisms where suited.
                Regionalisms are not to be abused, and an abundance will cause them to be removed in
                favour of a more universal style of expression.</para>
            <para>There are a number of conventions that are to be followed to make this easier:</para>
            <orderedlist numeration="loweralpha">
                <listitem>
                    <para>Words ending in -ise not -ize.</para>
                </listitem>
                <listitem>
                    <para>Words ending in -our not -or.</para>
                </listitem>
                <listitem>
                    <para>Programme not program.</para>
                </listitem>
                <listitem>
                    <para>Singular of data is datum.</para>
                </listitem>
                <listitem>
                    <para>Plural of forum is fora.</para>
                </listitem>
            </orderedlist>
            <para>Comments, class, and variable names are to always be spelt correctly. If a
                spelling mistake is found, refactoring is to take place to correct it.</para>
            <para>Unless stating a measurement, numbers below 10 are to be written out in full. For
                example, "I have two tickets to the concert" (quantity), versus "I bought a 2 l
                bottle of milk" (measurement). A count of an item reported by the software is to
                always be reported in arabic numerals.</para>
            <para>A list written in-line of a body of text is to always have a comma precede the
                'or' or 'and' adjoining the last item of the list.</para>
            <para>The definition of 'or' is to be taken as exclusive or. Where an inclusive or is
                intended 'and/or' is to be written.</para>
            <para>Conventions in technologies developed by a United States majority may require
                these conventions to not be upheld, for instance referencing 'background-color' in
                CSS. These are considered proper names which are always referred to in their
                original sense.</para>
            <para>All technical writing shall be written in the past tense, written in third person.</para>
            <para>The referencing standard shall be the IEEE style.</para>
        </section>
    </section>
    <section>
        <title>Graphic Standard</title>
        <section>
        	<title>General</title>
        	<para></para>
        </section>
        <section>
        	<title>Use of the Box Social Logo</title>
        	<para></para>
        </section>
    </section>
    <section>
        <title>DocBook XML</title>
        <section>
            <title>General</title>
            <para>All documentation shall be written using DocBook 5.0 XML as the documentation markup language.</para>
        </section>
        <section>
            <title>Sectioning</title>
            <para>The root element of each document shall be of type 'article'.</para>
        </section>
        <section>
            <title>Element IDs</title>
            <para>Each element id shall be written in all lowercase.</para>
            <para>Each element id shall have words as dash '-' separated.</para>
            <para>Each article element shall have an id consisting of the document number without revision and year information. For example xml:id="d1" but <emphasis>not</emphasis> xml:id="d1.1-2009"</para>
            <para>Each first level section shall have a uniquely named id, prefixed by the article id followed by a single dash. For example xml:id="d1-cs". The prefix ensures that when the articles are compiled into a book or cross-referenced they remain unique.</para>
        </section>
    </section>
</article>
